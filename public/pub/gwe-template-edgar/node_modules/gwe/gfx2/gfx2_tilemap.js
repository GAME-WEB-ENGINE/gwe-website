import { GfxDrawable } from "./gfx_drawable";
import { gfxManager } from "./gfx_manager";
import { GfxTileLayer } from "./gfx_tilelayer"
import { GfxTileset } from "./gfx_tileset";

export class GfxTileMap extends GfxDrawable {
  private rows: number;
  private columns: number;
  private tileHeight: number;
  private tileWidth: number;
  private layers: Array<GfxTileLayer>;
  private tileset: GfxTileset;

  constructor() {
    super();
    this.rows = 0;
    this.columns = 0;
    this.tileHeight = 0;
    this.tileWidth = 0;
    this.layers = [];
    this.tileset = new GfxTileset();
  }

  async loadFromFile(path: string): Promise<void> {
    const response = await fetch(path);
    const json = await response.json();
    if (!json.hasOwnProperty('Ident') || json['Ident'] != 'MAP') {
      throw new Error('GfxTileMap::loadFromFile(): File not valid !');
    }

    this.rows = json['Rows'];
    this.columns = json['Columns'];
    this.tileHeight = json['TileHeight'];
    this.tileWidth = json['TileWidth'];

    for (const obj of json['Layers']) {
      const layer = new GfxTileLayer();
      layer.loadFromData(obj);
      this.layers.push(layer);
    }

    this.tileset.loadFromData(json['Tileset']);
  }

  onDraw(): void {
    const ctx = gfxManager.getContext();

    for (const layer of this.layers) {
      if (!layer.isVisible()) {
        continue;
      }

      for (let i = 0; i < layer.getTileCount(); i++) {
        const texTilePosition = this.tileset.getTilePosition(layer.getTile(i));
        const texTileWidth = this.tileset.getTileWidth();
        const texTileHeight = this.tileset.getTileHeight();
        const location = layer.getLocationAt(i);
        const x = Math.round(location[0] * this.tileWidth);
        const y = Math.round(location[1] * this.tileHeight);
        ctx.drawImage(this.tileset.getTexture(), texTilePosition[0], texTilePosition[1], texTileWidth, texTileHeight, x, y, this.tileWidth, this.tileHeight);
      }
    }
  }

  getRows(): number {
    return this.rows;
  }

  getColumns(): number {
    return this.columns;
  }

  getTileHeight(): number {
    return this.tileHeight;
  }

  getTileWidth(): number {
    return this.tileWidth;
  }
}